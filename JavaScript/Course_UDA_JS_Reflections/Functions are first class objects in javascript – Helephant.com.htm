<!DOCTYPE html>
<html><head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Functions are first class objects in javascript  –  Helephant.com</title>
		<meta name="description" content="">
	
	<link href="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/css.css" rel="stylesheet" type="text/css">
	<link rel="stylesheet" href="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/style.css" type="text/css">
	<link rel="stylesheet" href="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/all.css" type="text/css">
	<link rel="alternate" type="application/rss+xml" title="Helephant.com RSS Feed" href="http://helephant.com/feed/">
	<link rel="pingback" href="http://helephant.com/xmlrpc.php">
	<meta name="viewport" content="width=device-width">
	<script type="text/javascript" src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/jquery.js"></script>
	<script type="text/javascript" src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/analytics.js"></script>
	<script type="text/javascript" src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/sample.js"></script>
</head>
<body>
<div class="page">
<div class="header">
	<a href="http://helephant.com/" class="site-logo">Helephant.com</a>
</div>
<div class="content">
<div class="article">
	<h1 id="post-417">Functions are first class objects in javascript</h1>
	<p>Functions in javascript are <a href="http://en.wikipedia.org/wiki/First-class_function">first class objects</a>. This means that javascript functions are just a special type of object that can do all the things that regular objects can do.</p>
<h2>Really, just like any other variable</h2>
<p>Here are a few of the important objects things that you can do with a function in javascript.</p>
<p>A function is an instance of the Object type:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">function</span> feedCat<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Kibble, tinned food and water"</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1"><span class="kw3">alert</span><span class="br0">(</span>feedCat <span class="kw1">instanceof</span> Object<span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p>A function can have properties and has a link back to its constructor method:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1">feedCat.<span class="me1">food</span> = <span class="st0">"kibble"</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw3">alert</span><span class="br0">(</span>feedCat.<span class="me1">food</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw3">alert</span><span class="br0">(</span>feedCat.<span class="me1">constructor</span><span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p>You can store the function in a variable:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">function</span> feedCat<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Kibble, tinned food and water"</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> eveningChore = feedCat;eveningChore<span class="br0">(</span><span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p>You can pass the function as a parameter to another function:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">function</span> doEveningChores<span class="br0">(</span>chores<span class="br0">)</span><span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw1">for</span><span class="br0">(</span><span class="kw2">var</span> x=<span class="nu0">0</span>; x<span class="sy0">&lt;</span>chores .<span class="me1">length</span>; x++<span class="br0">)</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; chores<span class="br0">[</span>x<span class="br0">]</span><span class="br0">(</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1">doEveningChores<span class="br0">(</span><span class="br0">[</span>feedCat<span class="br0">]</span><span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p>You can return the function from a function:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">function</span> tonightChores<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw1">return</span> feedCat;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> tonight = tonightChores<span class="br0">(</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1">tonight<span class="br0">(</span><span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p><a href="http://helephant.com/wp-content/uploads/2008/11/function.html">Complete example</a>.</p>
<h2>Can reduce repetitive code</h2>
<p>Being able to pass logic around an application in the form of a 
function means it’s possible to move a lot of repetitive code into a 
library function. It makes it easier to separate the unique pieces of 
logic from the generally useful logic.</p>
<p>For example, imagine you have a list of chocolate bars and you want 
to find all the ones that are made by Mars because you love M&amp;Ms and
 you want to find out what other chocolatey goodness you could be 
enjoying (I have been on a diet for seven months.. I content myself with
 imagining chocolate..).</p>
<p>You could write a loop to iterate through the complete list and apply your item selection logic like this:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">var</span> chocolateBars = <span class="br0">[</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="br0">{</span><span class="kw3">name</span>: <span class="st0">"Galaxy"</span>, manufacturer: <span class="st0">"Mars"</span><span class="br0">}</span>,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; …<span class="br0">]</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> marsChocolate = <span class="br0">[</span><span class="br0">]</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw1">for</span><span class="br0">(</span><span class="kw2">var</span> x=<span class="nu0">0</span>; x<span class="sy0">&lt;</span>chocolatebars .<span class="me1">length</span>; x++<span class="br0">)</span><span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">(</span>chocolateBars<span class="br0">[</span>x<span class="br0">]</span>.<span class="me1">manufacturer</span> == <span class="st0">"Mars"</span><span class="br0">)</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; marsChocolate.<span class="me1">push</span><span class="br0">(</span>chocolateBars<span class="br0">[</span>x<span class="br0">]</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span></div>
</li>
</ol>
</div>
<p>That’s great! Problem solved. Only now it’s Christmas time in your 
application and you have to sort the naughty list from the nice list. 
You’re always so busy at this time of year! Plus you learnt in 
programmer school that <a href="http://c2.com/cgi/wiki?DontRepeatYourself">you shouldn’t have to write the same thing twice</a>.</p>
<p>This sounds like the job for a library function! Let’s split the 
thing that will be the same each time (walking the existing list, 
building the new list) from the thing that will be different each time 
(applying the filter). The walking the list and building the new list 
logic can go into a library function. The filtering logic can be passed 
in as a parameter:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">var</span> array_helper = <span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; filter: <span class="kw2">function</span><span class="br0">(</span>list, filter<span class="br0">)</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">var</span> matches = <span class="br0">[</span><span class="br0">]</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">(</span><span class="kw2">var</span> x=<span class="nu0">0</span>; x<span class="sy0">&lt;</span>list .<span class="me1">length</span>; x++<span class="br0">)</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">(</span>filter<span class="br0">(</span>list<span class="br0">[</span>x<span class="br0">]</span><span class="br0">)</span><span class="br0">)</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; matches.<span class="me1">push</span><span class="br0">(</span>list<span class="br0">[</span>x<span class="br0">]</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> matches;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> marsChocolate = array_helper.<span class="me1">filter</span><span class="br0">(</span>chocolateBars,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp;<span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="kw1">item</span>.<span class="me1">manufacturer</span> == <span class="st0">"Mars"</span></div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> naughtyList = array_helper.<span class="me1">filter</span><span class="br0">(</span>childrenOfTheWorld,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="kw1">item</span>.<span class="me1">naughtiness</span> <span class="sy0">&amp;</span>gt; <span class="nu0">50</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span><span class="br0">)</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1"><span class="kw2">var</span> niceList = array_helper.<span class="me1">filter</span><span class="br0">(</span>childrenOfTheWorld,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; <span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="kw1">item</span>.<span class="me1">naughtiness</span> <span class="sy0">&amp;</span>lt;= <span class="nu0">50</span>;</div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span><span class="br0">)</span>;</div>
</li>
</ol>
</div>
<p><a href="http://helephant.com/wp-content/uploads/2008/11/function2.html">Complete example</a> (except for the naughty list – I wouldn’t presume to take Santa’s job).</p>
<p>Now the code that actually needs to be written for each list that 
needs filtering is really simple. If there’s a problem in this logic it 
will be dead easy to spot. Any problems with the logic in the library 
function can be fixed in one place in the code. Plus you can get a list 
of delicious confectionery any time you want and the good children of 
the world will all get their presents at Christmas time.</p>
<p>The filter function is such a useful idea that it’s a part of popular javascript libraries like <a href="http://docs.jquery.com/Traversing/filter#fn">JQuery</a> and <a href="http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.filter">Dojo</a>. It will also be included in the browser as a standard part of <a href="http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6#Array_extras">Javascript 1.6</a>.
 However the same idea can be applied in a lot of different places to 
reduce the amount of repeated code that’s not really pulling its weight.</p>
<h2>Methods are properties that contain functions</h2>
<p>Object methods are nothing special in javascript. They just are 
properties that happen to contain a function rather than something like a
 string or number value:</p>
<div class="geshi no javascript">
<ol>
<li class="li1">
<div class="de1"><span class="kw2">var</span> sabby = <span class="br0">{</span></div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp;<span class="kw3">name</span> : <span class="st0">"Sabby"</span>,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp;species: <span class="st0">"cat"</span>,</div>
</li>
<li class="li1">
<div class="de1">&nbsp; &nbsp; &nbsp;hello : <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"hissss"</span><span class="br0">)</span>; <span class="br0">}</span></div>
</li>
<li class="li1">
<div class="de1"><span class="br0">}</span>;</div>
</li>
</ol>
</div>
<p>This was pretty clever of the javascript language designers because 
it meant that they didn’t need to do anything special to support object 
methods. This is part of the reason why <a href="http://helephant.com/2008/08/building-simple-objects/">javascript can have objects without having classes</a>.</p>
<h2>Makes javascript flexible and dynamic</h2>
<p>A lot of javascript’s flexibility comes from being able to treat 
functions as first class objects. Pretty much every example in the <a href="http://helephant.com/2008/08/how-javascript-objects-work/">javascript objects articles</a> takes advantage of being able to treat a function just like a regular object.</p>
<p>All of the basic techniques for using objects in javascript rely on 
this one thing. Simple objects, constructor functions and prototypes all
 involve assigning methods to the properties of an object.</p>
<p>It also helps javascript to be flexible and lightweight. Useful ideas
 from other languages like namespacing, custom events, static methods 
and extension methods can all be simulated because it’s possible to 
create a function and put it wherever you need.</p>
<h2>Further reading</h2>
<p>The best reference I could find about this was an article about <a href="http://www.hunlock.com/blogs/Functional_Javascript">functional javascript</a>. It explains a heap of the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional language</a> features that javascript has.</p>
<p>Raganwald has an <a href="http://weblog.raganwald.com/2007/01/closures-and-higher-order-functions.html">interesting article</a>
 with some more general information about why techniques like this are 
so useful. It compares ruby and java but the logic still applies to 
javascript.</p>
<h2>What’s next?</h2>
<p><a href="http://helephant.com/2008/08/javascript-anonymous-functions/">Anonymous functions</a>
 are functions that are dynamically created at runtime using the 
function operator. Anonymous functions go hand in hand with functions 
being first class objects because these are two of the big things that 
javascript such a flexible and dynamic language.</p>
<p>This article is part of a set of related posts about <a href="http://helephant.com/2008/08/how-javascript-objects-work/">How javascript objects work</a>.</p>
	<div class="summary">
		Posted on 19 Aug 08 by <a href="http://www.helephant.com/about/" title="Visit Helen Emerson’s website" rel="author external">Helen Emerson</a> 
		(last updated on 01 Oct 11). <br>
		Filed under <a href="http://helephant.com/category/web-development/javascript-webdev/" rel="category tag">Javascript</a><br>
			</div>
</div>

	
</div>
<div class="sidebar">
	<div class="search">
		<h2>Search</h2>
		<form method="get" id="searchform" action="http://helephant.com/">
	<input name="s" id="s" type="text">
	<input id="searchsubmit" value="Search" type="submit">
</form>
 
	</div>

	<ul class="unindented sidebar-links follow-links">
		<li>
			<a href="http://twitter.com/helephant" class="follow"><img src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/twitter.svg" alt="follow me on Twitter"></a>
			<a href="http://twitter.com/helephant" class="follow">Follow @helephant on twitter</a>
		</li>
		<li>
			<a href="http://feeds.feedburner.com/helephant" class="follow"><img src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/feed-icon.svg" alt="subscribe to new posts"></a>
			<a href="http://feeds.feedburner.com/helephant" class="follow">Subscribe to some RSS goodness</a>
		</li>
		<li>
			<a href="http://helephant.com/about"><img src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/elephant.svg" alt="about helephant.com"></a>
			<a href="http://helephant.com/about">About helephant.com</a>
		</li>
	</ul>
	
	<h2>Greatest hits</h2>
				<ul class="unindented greatest-hits">
					<li>
				<a href="http://helephant.com/2008/08/17/how-javascript-objects-work/">How javascript objects work</a>
			</li>			
					<li>
				<a href="http://helephant.com/2007/05/12/diy-javascript-stack-trace/">DIY javascript stack trace</a>
			</li>			
					<li>
				<a href="http://helephant.com/2010/10/09/lego-scrum-board-avatars/">Lego scrum board avatars</a>
			</li>			
					<li>
				<a href="http://helephant.com/2009/11/23/css3-multiple-background-images/">CSS3 Multiple background images</a>
			</li>			
					<li>
				<a href="http://helephant.com/2008/07/27/form-layout-using-negative-margins/">Form layout using negative margins</a>
			</li>			
					<li>
				<a href="http://helephant.com/2011/01/31/ddd9-slides/">Maintainable CSS presentation slides</a>
			</li>			
				</ul>
	</div>
<div class="footer">
	<div class="footer-column">
		<ul class="unindented footer-links">
			<li><a href="http://helephant.com/">Home</a></li>
			<li><a href="http://helephant.com/about/">About</a></li>
			<li><a href="http://feeds.feedburner.com/helephant" class="follow">Subscribe</a></li>
			<li><a href="http://twitter.com/helephant" class="follow">Follow</a></li>
		</ul>
	</div>
	<div class="footer-column">
		<h2>Categories</h2>
		<ul class="unindented footer-links">
																<li><a href="http://helephant.com/category/net/">.NET</a></li>
																																																																										<li><a href="http://helephant.com/category/programming/">Programming</a></li>
																		<li><a href="http://helephant.com/category/scrum/">Scrum</a></li>
																																<li><a href="http://helephant.com/category/sysadmin/">Sysadmin</a></li>
																									<li><a href="http://helephant.com/category/uncategorized/">Uncategorized</a></li>
																		<li><a href="http://helephant.com/category/web-development/">Web development</a></li>
										</ul>
	</div>
	<div class="footer-column">
		<h2>Latest stuff</h2>
							<ul class="unindented footer-links">
							<li><a href="http://helephant.com/2013/04/16/visual-studio-and-resharper-gitignore-file/">Visual Studio and Resharper .gitignore file</a></li>			
							<li><a href="http://helephant.com/2013/04/14/git-command-cheat-sheet/">Git command cheat sheet</a></li>			
							<li><a href="http://helephant.com/2013/03/29/css3-flexbox-examples/">CSS3 flexbox examples</a></li>			
							<li><a href="http://helephant.com/2013/03/23/css3-flexbox-layout/">Using the CSS3 flexbox layout</a></li>			
							<li><a href="http://helephant.com/2013/03/17/using-css3-multi-column-layouts-to-split-a-list-into-columns/">Using CSS3 multi-column layouts to split a list into columns</a></li>			
							<li><a href="http://helephant.com/2012/08/31/are-you-a-developer-who-likes-to-learn-new-things/">Are you a developer who likes to learn new things?</a></li>			
							<li><a href="http://helephant.com/2012/07/24/web-debugging-on-windows/">Web debugging on windows</a></li>			
							<li><a href="http://helephant.com/2012/07/23/debugging-iis7-requests-with-windows-event-tracing/">Debugging IIS7 requests with windows event tracing</a></li>			
						</ul>
			</div>
	<div class="footer-column footer-blurb">
       	<p>This is the technical blog of web developer Helen Emerson.</p>
       	
       	<p>I am currently 
        a technical architect at <a href="http://www.totaljobsgroup.com/">Totaljobs Group</a> 
        in London, working on .NET websites. I write about 
        <a href="http://helephant.com/category/web-development/">web development</a> (particularly 
        <a href="http://helephant.com/category/web-development/javascript-webdev/">javascript</a> 
        and <a href="http://helephant.com/category/web-development/css-webdev/">CSS</a>) and working with 
        <a href="http://helephant.com/category/net">.NET</a>.</p>
        <p><a href="http://helephant.com/about">Read more »</a></p>
	</div>
</div>
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Functions%20are%20first%20class%20objects%20in%20javascript%20%E2%80%93%20Helephant.com_fichiers/ga.js" type="text/javascript"></script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-796199-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>


</body></html>